/***********************************************************************
使用递归的思想实现，对给出的数字进行分段处理，这里以21345进行分析
首先将21345分成两段，1~1345；1346~21345

对于最高位来说，当最高位为大于1的数时。如2，那么
10000~19999所有的数字均含有数字1，那么数字1出现了10^4次，
当最高位为1时，1出现的次数取决于后边的四位数字，次数为1345+1次

这里最高位的1出现次数统计完成后，对于后边的后四位，1出现的次数可以固定其中一位为1，
其余的三位从0到9十个数中任选，总共有2*4*3^10,2为最高位的数字，4为除最高位外其余位的
位数，3为除确定为1的位以外的位数

接下来递归计算1~1345之间1的个数
************************************************************************/
class Solution {
public:
    int NumberOf1Between1AndN_Solution(int n)
    {
    	if(n < 0)
            return 0;
        char str[50];
        sprintf(str,"%d",n);
        return NumberOf1(str);
    }
private:
    int NumberOf1(char* str)
    {
        if(str == NULL || *str < '0' || *str > '9' || *str == '/0')
            return 0;
        int length = static_cast<int>(strlen(str));
        int first = *str - '0';
        if(length == 1 && first == 0)
            return 0;
        if(length == 1 && first > 0)
            return 1;
        
        //以21345为例，先求最高位为1的时候的数字个数
        int theFirst = 0;
        if(first > 1)
            theFirst = powOf10(length-1);
        else if(first == 1)
        {
            theFirst = atoi(str+1) + 1;
        }
        int theOther = 0;
        //1346~21345的其余四位为1的个数
        theOther = first*powOf10(length-2)*(length - 1);
        //1~1345
        int thelast = NumberOf1(str+1);
        return theFirst + theOther + thelast;
            
    }
    int powOf10(int n)
    {
        int result = 1;
        for(int i = 0; i < n; ++i)
            result *= 10;
        return result;
    }
};
/*************************************************************************
 * //主要思路：设定整数点（如1、10、100等等）作为位置点i（对应n的各位、十位、百位等等），分别对每个数位上有多少包含1的点进行分析
    //根据设定的整数位置，对n进行分割，分为两部分，高位n/i，低位n%i
    //当i表示百位，且百位对应的数>=2,如n=31456,i=100，则a=314,b=56，此时百位为1的次数有a/10+1=32（最高两位0~31），每一次都包含100个连续的点，即共有(a%10+1)*100个点的百位为1
    //当i表示百位，且百位对应的数为1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，则共有a%10(最高两位0-30)次是包含100个连续点，当最高两位为31（即a=311），本次只对应局部点00~56，共b+1次，所有点加起来共有（a%10*100）+(b+1)，这些点百位对应为1
    //当i表示百位，且百位对应的数为0,如n=31056,i=100，则a=310,b=56，此时百位为1的次数有a/10=31（最高两位0~30）
    //综合以上三种情况，当百位对应0或>=2时，有(a+8)/10次包含所有100个点，还有当百位为1(a%10==1)，需要增加局部点b+1
    //之所以补8，是因为当百位为0，则a/10==(a+8)/10，当百位>=2，补8会产生进位位，效果等同于(a/10+1) 
 *************************************************************************/
class Solution {
public:
    int NumberOf1Between1AndN_Solution(int n)
    {
    	int count = 0;
        for(long i = 1; i <= n; i=i*10)
        {
            int a = n/i;
            int b = n%i;
            count = count + (a+8)/10*i + (a%10==1)*(b+1);
        }
        return count;
    }
    
};
